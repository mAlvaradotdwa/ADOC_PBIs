expression 'Errors in CONTENEDORES' =
		let
		Source = CONTENEDORES,
		  #"Detected Type Mismatches" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Source, pairs),
		  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1)
		in
		    #"Added Index"
	lineageTag: cb82cc68-3530-4717-8b8c-2f96159e2dc1
	queryGroup: 'Query Errors - 30/8/2024 22:08:25'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Errors in INV TGT' =
		let
		Source = #"INV TGT",
		  #"Detected Type Mismatches" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Source, pairs),
		  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
		  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"MARCA", "PAIS BV", "DEPTO BV", "GENERO BV", "CATEGORIA BV", "METRICA", "AÑO MES", "INVENTARIO $"}),
		  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "MARCA", "PAIS BV", "DEPTO BV", "GENERO BV", "CATEGORIA BV", "METRICA", "AÑO MES", "INVENTARIO $"})
		in
		  #"Reordered Columns"
	lineageTag: edd0b1a9-4a64-472f-bf9b-cf2e89434405
	queryGroup: 'Query Errors - 7/10/2024 10:09:42'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: e188b951-e45b-44ac-8ca3-6356b79f0d9a
	queryGroup: 'Transform File from IH09S\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression 'Transform Sample File' =
		let
		    Source = Excel.Workbook(Parameter1, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 24775ff8-1f31-4093-8f42-8448ae9603a1
	queryGroup: 'Transform File from IH09S'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Sample File' =
		let
		    Source = Folder.Files("C:\Users\mdaboub\OneDrive - Empresas ADOC, S.A. de C.V\Escritorio\TGT INVENTARIO CONTINGENCIA\IH09S"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: d26c8ee4-9b8e-4884-83d0-b464645bd846
	queryGroup: 'Transform File from IH09S\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression 'Transform File' =
		let
		    Origen = (Parameter1 as binary) => let
		    Source = Excel.Workbook(Parameter1, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Origen
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: af61435c-5b14-4dbd-a9e9-410164e63d23
	queryGroup: 'Transform File from IH09S\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression Parameter2 = #"Sample File (2)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (2)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 324a7197-02ad-4090-aa76-338dbe49e307
	queryGroup: 'Transform File from MKS (2)\Helper Queries'

	annotation PBI_ResultType = Binary

	annotation PBI_NavigationStepName = Navigation

expression 'Transform Sample File (2)' =
		let
		    Source = Excel.Workbook(Parameter2, null, true),
		    MKS_Sheet = Source{[Item="MKS",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(MKS_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 3fe0ba28-494b-4a7c-8a26-9e3453855af3
	queryGroup: 'Transform File from MKS (2)'

	annotation PBI_ResultType = Table

expression 'Sample File (2)' =
		let
		    Source = Folder.Files("C:\Users\mdaboub\OneDrive - Empresas ADOC, S.A. de C.V\Escritorio\TGT INVENTARIO CONTINGENCIA\MKS"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 40688199-8720-475b-b864-0b523ab7e33f
	queryGroup: 'Transform File from MKS (2)\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform File (2)' =
		let
		    Origen = (Parameter2 as binary) => let
		    Source = Excel.Workbook(Parameter2, null, true),
		    MKS_Sheet = Source{[Item="MKS",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(MKS_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Origen
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (2)""}" ]
	lineageTag: 0f497a5c-2a21-4557-b224-5e6538cb524e
	queryGroup: 'Transform File from MKS (2)\Helper Queries'

	annotation PBI_ResultType = Function

expression 'Sample File (3)' =
		let
		    Source = Folder.Files("C:\Users\mdaboub\OneDrive - Empresas ADOC, S.A. de C.V\Escritorio\TGT INVENTARIO CONTINGENCIA\ZINTS"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 0a4974bf-6d5d-4480-a0b3-686cafd5753e
	queryGroup: 'Transform File from ZINTS\Helper Queries'

	annotation PBI_ResultType = Binary

expression Parameter3 = #"Sample File (3)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (3)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 63ac1bab-111f-4043-97f4-127ba60e5bf2
	queryGroup: 'Transform File from ZINTS\Helper Queries'

	annotation PBI_ResultType = Binary

	annotation PBI_NavigationStepName = Navigation

expression 'Transform Sample File (3)' =
		let
		    Source = Csv.Document(Parameter3,[Delimiter="	", Columns=47, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: dd088688-4732-4ba4-b712-8fb9c22e97ff
	queryGroup: 'Transform File from ZINTS'

	annotation PBI_ResultType = Table

expression 'Transform File (3)' =
		let
		    Origen = (Parameter3 as binary) => let
		    Source = Csv.Document(Parameter3,[Delimiter="	", Columns=47, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Origen
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (3)""}" ]
	lineageTag: 98b9c661-5138-422f-bab1-91c5d5a44eb7
	queryGroup: 'Transform File from ZINTS\Helper Queries'

	annotation PBI_ResultType = Function

expression 'Sample File (4)' =
		let
		    Source = Folder.Files("C:\Users\mdaboub\OneDrive - Empresas ADOC, S.A. de C.V\Escritorio\TGT INVENTARIO CONTINGENCIA\TRANS TDAS"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 0cc4e04d-e9a8-4ba8-b4aa-e983c153263d
	queryGroup: 'Transform File from TRANS TDAS (2)\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression Parameter4 = #"Sample File (4)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (4)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: ebb37fec-fb36-4e31-bc82-ee39a6c38f91
	queryGroup: 'Transform File from TRANS TDAS (2)\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression 'Transform Sample File (4)' =
		let
		    Source = Csv.Document(Parameter4,[Delimiter="	", Columns=49, Encoding=1252, QuoteStyle=QuoteStyle.None])
		in
		    Source
	lineageTag: 37f7c174-7d46-4b82-b686-08b9e0f15790
	queryGroup: 'Transform File from TRANS TDAS (2)'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Transform File (4)' =
		let
		    Origen = (Parameter4 as binary) => let
		    Source = Csv.Document(Parameter4,[Delimiter="	", Columns=49, Encoding=1252, QuoteStyle=QuoteStyle.None])
		in
		    Source
		in
		    Origen
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (4)""}" ]
	lineageTag: 194fe9c2-64aa-4420-a12f-ce76aa08da5e
	queryGroup: 'Transform File from TRANS TDAS (2)\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

